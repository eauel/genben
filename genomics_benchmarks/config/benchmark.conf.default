[ftp]

# Whether or not the FTP downloader module should be used when running benchmark
# tool in Setup mode.
enabled = False

# FTP Server to retrieve files from:
server = ftp.someserver.com

# Username and password to login into FTP server with.
# Leave both fields blank for anonymous login.
username = 
password = 

# Determines whether to use TLS or non-secure FTP
use_tls = False

# Directory on {server} to download files from:
directory = files

# File or list of files to download within {directory}.
#  - If downloading list of files, names should be separated using
#    delimiter specified in {file_delimiter}.
#  - To download all files within {directory}, set {files} to "*" (without quotes).
files = sample.vcf

# If downloading multiple files, the delimiter that will be used for
# separating multiple filenames.
file_delimiter = |


[vcf_to_zarr]

# Whether or not the VCF to Zarr Converter module should be used when running
# benchmark tool in Setup mode.
# Note: To run VCF to Zarr conversion as part of the benchmark process, see
#       the [benchmark] configuration section.
enabled = False

# Alt number to assume when converting to Zarr format.
# If set to "auto", this will be determined during the conversion process.
alt_number = auto

# Number of variants of chunks in which data are processed.
# If set to "default", the default value from scikit-allel is used.
chunk_length = default

# Number of samples to use when storing chunks in output.
# If set to "default", the default value from scikit-allel is used.
chunk_width = default

# Type of compression to utilize when storing Zarr-formatted data.
#  Available Compressor Types:
#    - Blosc
#    - LZ4 (not yet implemented)
#    - LZMA (not yet implemented)
compressor = Blosc

# (Blosc Compressor Only)
# Specifies the type of compression algorithm for the Blosc compressor to use.
# Possible values: zstd, blosclz, lz4, lz4hc, zlib, snappy
blosc_compression_algorithm = zstd

# (Blosc Compressor Only)
# Specifies the compression level to use when converting to Zarr
# Possible values: any integer between 0 and 9
blosc_compression_level = 1

# (Blosc Compressor Only)
# Specifies the shuffle mode to use with the Blosc compressor.
# Possible Values:
#   - NOSHUFFLE:     0
#   - SHUFFLE:       1
#   - BITSHUFFLE:    2
#   - AUTOSHUFFLE:  -1
blosc_shuffle_mode = -1


[dask]

# Enables/disables connection to a Dask distributed scheduler.
enabled = False

# The IP address and port of the scheduler to connect to.
scheduler_address = 127.0.0.1
scheduler_port = 8786


[benchmark]

# Specifies how many times the benchmark tool should run
# each available benchmark.
benchmark_number_runs = 5

# Specifies where the benchmark tool should get its data from.
# Possible Values:
#   - vcf:  uses datasets within the ./data/vcf/ directory. This option will
#           result in VCF data being converted to Zarr format as part of the
#           benchmarking process.
#   - zarr: uses Zarr-formtted datasets within the ./data/zarr/ directory. This
#           option will result in skipping the benchmark of the VCF to Zarr
#           conversion process.
benchmark_data_input = vcf

# Specifies which dataset to use for the benchmarking process.
benchmark_dataset =

# Specifies the number of variants to include from the dataset input for benchmarking.
# If a value of -1 is passed, then all variants will be included.
benchmark_num_variants = -1

# Specifies the number of samples to include from the dataset input for benchmarking.
# If a value of -1 is passed, then all samples will be included.
benchmark_num_samples = -1


# Enables/disables running simple aggregations, such as allele count and genotype count, 
# as part of the benchmarking process.
benchmark_aggregations = True

# Enables Principal Component Analysis (PCA) as part of the benchmarking process.
benchmark_pca = True

# Specifies the type of data array to use when loading the genotype data for benchmarking.
# Possible Values:
#   - Normal:   0
#   - Dask:     1
#   - Chunked:  2
genotype_array_type = 1

# [PCA Benchmark] Specifies the number of principal components to keep when performing PCA analysis.
pca_number_components = 10

# [PCA Benchmark] Specifies the type of data scaling to apply to the data set.
# Possible Values:
#   - Standard:     0
#   - Patterson:    1
#   - None:         2
pca_data_scaler = 1

# [PCA Benchmark] Sets the number of SNPs to use as a subset of the data set.
# If the size of the data set is smaller than pca_subset_size, that will be used instead.
# Additionally, a value of -1 can be passed to include everything (no random subset will be taken).
pca_subset_size = -1

# [PCA Benchmark: Linkage Disequilibrium] Specifies whether to enable or disable LD pruning operation.
# Note: The LD pruning implementation is not parallelized and may not scale well when running on multi-node systems.
pca_ld_enabled = False

# [PCA Benchmark: Linkage Disequilibrium] Sets the number of iterations to perform LD pruning.
pca_ld_pruning_number_iterations = 2

# [PCA Benchmark: Linkage Disequilibrium] Sets the window size to use when performing LD pruning.
pca_ld_pruning_size = 100

# [PCA Benchmark: Linkage Disequilibrium] Sets the number of variants to advance when performing LD pruning.
pca_ld_pruning_step = 20

# [PCA Benchmark: Linkage Disequilibrium] Sets the maximum value of r^2 to include variants.
pca_ld_pruning_threshold = 0.01


[output.csv]
# Specifies whether to enable/disable benchmark results output to CSV-style file.
enabled = True

# Specifies which delimiter to use to separate fields within each row of data
delimiter = |


[output.influxdb]
# Specifies whether to enable/disable benchmark results output to a InfluxDB server
enabled = False

# Host/IP address and port of the machine running InfluxDB
host = localhost
port = 8086

# Username and password credentials to login to InfluxDB instance
username = root
password = root

# Name of database to store benchmark results
database_name = benchmark

# (Optional) Tag that can be used to group/organize different benchmark results
benchmark_group =

# (Optional) Tag that can be used to specify which machine is running the benchmark.
# This option can be useful for matching benchmark results when pushing data from multiple machines.
device_name =
